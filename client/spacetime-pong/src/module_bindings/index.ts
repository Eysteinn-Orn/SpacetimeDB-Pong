// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { GameTick } from "./game_tick_reducer.ts";
export { GameTick };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { MovePaddle } from "./move_paddle_reducer.ts";
export { MovePaddle };

// Import and reexport all table handle types
import { BallTableHandle } from "./ball_table.ts";
export { BallTableHandle };
import { GameStateTableHandle } from "./game_state_table.ts";
export { GameStateTableHandle };
import { GameTickScheduleTableHandle } from "./game_tick_schedule_table.ts";
export { GameTickScheduleTableHandle };
import { PlayerInfoTableHandle } from "./player_info_table.ts";
export { PlayerInfoTableHandle };
import { PlayerInputTableHandle } from "./player_input_table.ts";
export { PlayerInputTableHandle };

// Import and reexport all types
import { Ball } from "./ball_type.ts";
export { Ball };
import { GameState } from "./game_state_type.ts";
export { GameState };
import { GameStatus } from "./game_status_type.ts";
export { GameStatus };
import { GameTickSchedule } from "./game_tick_schedule_type.ts";
export { GameTickSchedule };
import { PlayerInfo } from "./player_info_type.ts";
export { PlayerInfo };
import { PlayerInput } from "./player_input_type.ts";
export { PlayerInput };

const REMOTE_MODULE = {
  tables: {
    ball: {
      tableName: "ball",
      rowType: Ball.getTypeScriptAlgebraicType(),
      primaryKey: "singletonId",
    },
    game_state: {
      tableName: "game_state",
      rowType: GameState.getTypeScriptAlgebraicType(),
      primaryKey: "singletonId",
    },
    game_tick_schedule: {
      tableName: "game_tick_schedule",
      rowType: GameTickSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    player_info: {
      tableName: "player_info",
      rowType: PlayerInfo.getTypeScriptAlgebraicType(),
      primaryKey: "playerId",
    },
    player_input: {
      tableName: "player_input",
      rowType: PlayerInput.getTypeScriptAlgebraicType(),
      primaryKey: "playerId",
    },
  },
  reducers: {
    game_tick: {
      reducerName: "game_tick",
      argsType: GameTick.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    move_paddle: {
      reducerName: "move_paddle",
      argsType: MovePaddle.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "GameTick", args: GameTick }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "MovePaddle", args: MovePaddle }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  gameTick(args: GameTickSchedule) {
    const __args = { args };
    let __writer = new BinaryWriter(1024);
    GameTick.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("game_tick", __argsBuffer, this.setCallReducerFlags.gameTickFlags);
  }

  onGameTick(callback: (ctx: ReducerEventContext, args: GameTickSchedule) => void) {
    this.connection.onReducer("game_tick", callback);
  }

  removeOnGameTick(callback: (ctx: ReducerEventContext, args: GameTickSchedule) => void) {
    this.connection.offReducer("game_tick", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  movePaddle(newY: number) {
    const __args = { newY };
    let __writer = new BinaryWriter(1024);
    MovePaddle.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_paddle", __argsBuffer, this.setCallReducerFlags.movePaddleFlags);
  }

  onMovePaddle(callback: (ctx: ReducerEventContext, newY: number) => void) {
    this.connection.onReducer("move_paddle", callback);
  }

  removeOnMovePaddle(callback: (ctx: ReducerEventContext, newY: number) => void) {
    this.connection.offReducer("move_paddle", callback);
  }

}

export class SetReducerFlags {
  gameTickFlags: CallReducerFlags = 'FullUpdate';
  gameTick(flags: CallReducerFlags) {
    this.gameTickFlags = flags;
  }

  movePaddleFlags: CallReducerFlags = 'FullUpdate';
  movePaddle(flags: CallReducerFlags) {
    this.movePaddleFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get ball(): BallTableHandle {
    return new BallTableHandle(this.connection.clientCache.getOrCreateTable<Ball>(REMOTE_MODULE.tables.ball));
  }

  get gameState(): GameStateTableHandle {
    return new GameStateTableHandle(this.connection.clientCache.getOrCreateTable<GameState>(REMOTE_MODULE.tables.game_state));
  }

  get gameTickSchedule(): GameTickScheduleTableHandle {
    return new GameTickScheduleTableHandle(this.connection.clientCache.getOrCreateTable<GameTickSchedule>(REMOTE_MODULE.tables.game_tick_schedule));
  }

  get playerInfo(): PlayerInfoTableHandle {
    return new PlayerInfoTableHandle(this.connection.clientCache.getOrCreateTable<PlayerInfo>(REMOTE_MODULE.tables.player_info));
  }

  get playerInput(): PlayerInputTableHandle {
    return new PlayerInputTableHandle(this.connection.clientCache.getOrCreateTable<PlayerInput>(REMOTE_MODULE.tables.player_input));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
